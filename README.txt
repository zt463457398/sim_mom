SIM_MOM 系统说明文档
=================

一、快速开始
----------
1. 环境要求
   后端环境：
   - JDK 17+
   - Maven 3.8+
   - MySQL 8.0+

   前端环境：
   - Node.js 16+
   - npm 8+
   - Vue 3.x
   - Vue CLI 5.x

2. 核心功能模块
   - 用户认证：基于JWT的登录认证
   - 用户管理：用户CRUD操作
   - 个人中心：个人信息维护
   - 系统配置：跨域等基础配置

3. 开发和构建说明
   前端开发：
   ```bash
   # 进入前端项目目录
   cd mom-web
   
   # 安装依赖
   npm install
   
   # 启动开发服务器
   npm run serve
   ```

   前端构建：
   ```bash
   # 构建生产环境版本
   npm run build
   ```

   注意事项：
   - 开发环境下使用 npm run serve，代码不会进行优化
   - 部署生产环境前必须使用 npm run build 构建优化版本
   - 生产环境构建会自动进行代码压缩、Tree-shaking等优化

二、技术架构
----------
1. 后端技术栈
   - Spring Boot 3
   - MyBatis Plus
   - MySQL
   - JWT
   - Maven

2. 前端技术栈
   - Vue 3
   - Element Plus
   - Vue Router
   - Axios
   - Vue CLI

三、项目结构
----------
1. 后端核心目录(mom-api)
   ```
   src/main/
   ├── java/com/zhgw/
   │   ├── controller/     # 接口控制层
   │   ├── service/        # 业务逻辑层
   │   ├── mapper/         # 数据访问层
   │   ├── model/          # 数据模型
   │   └── common/         # 公共组件
   └── resources/          # 配置资源
   ```

2. 前端核心目录(mom-web)
   ```
   src/
   ├── api/        # 接口封装
   ├── views/      # 页面组件
   ├── components/ # 公共组件
   ├── router/     # 路由配置
   ├── store/      # 状态管理
   └── utils/      # 工具函数
   ```

四、关键文件说明
-------------
1. 后端关键文件
   - SysUserController.java    # 用户管理接口
   - SysUserServiceImpl.java   # 用户业务实现
   - R.java                    # 统一响应封装
   - GlobalExceptionHandler.java # 全局异常处理
   - TokenException.java       # Token异常处理
   - sys_user.sql             # 数据库脚本

2. 前端关键文件
   - request.js             # 请求封装
   - auth.js               # 认证管理
   - router/index.js       # 路由配置

五、开发规范(必读)
---------------
1. 代码规范
   - 遵循阿里巴巴Java开发规范
   - 类和方法必须添加注释
   - 使用统一代码格式化配置

2. 安全规范
   - 所有接口必须进行权限校验
   - 敏感数据必须加密传输
   - 定期更新密钥和证书

3. Git使用规范
   - 遵循Git Flow工作流
   - 提交信息格式: type: message
   - 定期代码review

六、运维指南
----------
1. 部署流程
   - 环境配置检查
   - 数据库脚本执行
   - 应用服务部署
   - 配置文件检查

2. 监控告警
   - 服务器监控配置
   - 异常告警阈值设置
   - 应急响应流程

七、待优化项(优先级排序)
--------------------
1. 紧急优化项
   a. 扩展异常处理机制（基于现有异常处理框架）
      - 扩展现有异常体系
        * 基于TokenException完善认证异常体系
        * 添加业务异常类BusinessException
        * 细化验证异常ValidateException
      - 优化错误提示信息
      - 增强异常日志记录
      - 实现步骤：
        1) 完善异常继承体系
        2) 在GlobalExceptionHandler中细化异常处理
        3) 统一异常错误码管理
        4) 优化异常提示信息的用户友好度
        5) 增加异常日志的上下文信息

   b. 添加操作日志记录
      - 实现AOP切面记录操作日志
      - 设计操作日志表结构
      - 添加日志查询功能
      - 实现步骤：
        1) 创建操作日志注解@OperLog
        2) 实现日志记录切面
        3) 创建日志表和实体类
        4) 添加日志查询接口

   c. 优化数据库查询性能
      - 添加必要的索引
      - 优化SQL语句
      - 实现分页查询优化
      - 实现步骤：
        1) 进行SQL审计，找出慢查询
        2) 创建合适的索引
        3) 优化分页查询方式
        4) 添加查询缓存

2. 重要优化项
   a. 添加Redis缓存
      - 引入Redis依赖
      - 配置Redis连接
      - 实现缓存管理
      - 实现步骤：
        1) 添加Redis配置类
        2) 实现缓存工具类
        3) 添加缓存注解
        4) 设置缓存策略

   b. 实现角色权限管理
      - 设计权限表结构
      - 实现RBAC权限模型
      - 添加权限控制注解
      - 实现步骤：
        1) 创建角色和权限表
        2) 实现权限验证注解
        3) 添加权限管理接口
        4) 实现菜单动态加载

   c. 添加文件上传功能
      - 配置文件上传参数
      - 实现文件存储服务
      - 添加文件管理功能
      - 实现步骤：
        1) 配置文件上传限制
        2) 实现文件上传接口
        3) 添加文件管理功能
        4) 实现文件预览

3. 长期优化项
   a. 优化移动端适配
      - 实现响应式布局
      - 优化移动端交互
      - 添加移动端特有功能
      - 实现步骤：
        1) 添加媒体查询样式
        2) 优化组件布局
        3) 适配触摸事件
        4) 优化页面加载速度

   b. 实现多语言支持
      - 提取文本资源
      - 实现语言切换功能
      - 添加语言包管理
      - 实现步骤：
        1) 创建语言资源文件
        2) 实现语言切换组件
        3) 添加语言配置功能
        4) 实现动态加载语言包

   c. 添加数据可视化
      - 引入图表组件
      - 实现数据统计接口
      - 添加实时数据展示
      - 实现步骤：
        1) 集成ECharts组件
        2) 实现数据统计接口
        3) 添加图表组件
        4) 实现数据自动刷新

4. 性能优化建议
   a. 前端性能优化
      - 实现路由懒加载
      - 优化资源加载
      - 添加请求防抖
      - 实现步骤：
        1) 配置组件懒加载
        2) 优化静态资源
        3) 实现数据缓存
        4) 添加加载动画

   b. 后端性能优化
      - 优化JVM参数
      - 添加数据库连接池
      - 实现请求限流
      - 实现步骤：
        1) 配置JVM参数
        2) 添加连接池配置
        3) 实现限流注解
        4) 优化SQL执行计划

八、注意事项
----------
1. 开发注意事项
   - 本地配置文件不要提交
   - 定期同步主分支代码
   - 保持代码简洁性
   - Token相关异常统一使用TokenException处理

2. 部署注意事项
   - 备份数据库后再操作
   - 分批次发布更新
   - 保留回滚方案